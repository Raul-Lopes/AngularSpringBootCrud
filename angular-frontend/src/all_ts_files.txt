Adapt those files to  migrate my application to Angular 19, using the best plactices for Angular 19.
Show me the full file implementation for current files and new ones if any.

---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\favicon.ico
---
<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <title>Angular Frontend</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>

<body>
  <app-root></app-root>
</body>

</html>
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\main.server.ts
---
import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { config } from './app/app.config.server';

const bootstrap = () => bootstrapApplication(AppComponent, config);

export default bootstrap;
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\main.ts
---
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\server.ts
---
import {
  AngularNodeAppEngine,
  createNodeRequestHandler,
  isMainModule,
  writeResponseToNodeResponse,
} from '@angular/ssr/node';
import express from 'express';
import { dirname, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';

const serverDistFolder = dirname(fileURLToPath(import.meta.url));
const browserDistFolder = resolve(serverDistFolder, '../browser');

const app = express();
const angularApp = new AngularNodeAppEngine();

/**
 * Example Express Rest API endpoints can be defined here.
 * Uncomment and define endpoints as necessary.
 *
 * Example:
 * ```ts
 * app.get('/api/**', (req, res) => {
 *   // Handle API request
 * });
 * ```
 */

/**
 * Serve static files from /browser
 */
app.use(
  express.static(browserDistFolder, {
    maxAge: '1y',
    index: false,
    redirect: false,
  }),
);

/**
 * Handle all other requests by rendering the Angular application.
 */
app.use('/**', (req, res, next) => {
  angularApp
    .handle(req)
    .then((response) =>
      response ? writeResponseToNodeResponse(response, res) : next(),
    )
    .catch(next);
});

/**
 * Start the server if this module is the main entry point.
 * The server listens on the port defined by the `PORT` environment variable, or defaults to 4000.
 */
if (isMainModule(import.meta.url)) {
  const port = process.env['PORT'] || 4000;
  app.listen(port, () => {
    console.log(`Node Express server listening on http://localhost:${port}`);
  });
}

/**
 * Request handler used by the Angular CLI (for dev-server and during build) or Firebase Cloud Functions.
 */
export const reqHandler = createNodeRequestHandler(app);
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\styles.css
---
/* You can add global styles to this file, and also import other style files */
@import "bootstrap/dist/css/bootstrap.min.css";

.footer {
    position: absolute;
    bottom: 0;
    width: 100%;
    height: 30px;
    background-color: blue;
    text-align: center;
    color: white;
}
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\test.ts
---
// This file is required by karma.conf.js and loads recursively all the .spec and framework files

import 'zone.js/dist/zone-testing';
import { getTestBed } from '@angular/core/testing';
import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
} from '@angular/platform-browser-dynamic/testing';

declare const require: {
  context(path: string, deep?: boolean, filter?: RegExp): {
    keys(): string[];
    <T>(id: string): T;
  };
};

// First, initialize the Angular testing environment.
getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting()
);
// Then we find all the tests.
const context = require.context('./', true, /\.spec\.ts$/);
// And load the modules.
context.keys().map(context);
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\all_ts_files.txt
---
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\app-routing.module.ts
---
// Importing necessary modules and components for routing.
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router'; // Angular's router modules for defining routes.
import { ClientListComponent } from './client-list/client-list.component'; // Component for displaying the list of clients.
import { CreateClientComponent } from './create-client/create-client.component'; // Component for creating a new client.
import { UpdateClientComponent } from './update-client/update-client.component'; // Component for updating an existing client.
import { ClientDetailsComponent } from './client-details/client-details.component'; // Component for viewing client details.

// Defining the application's route configuration.
const routes: Routes = [
  { path: 'clients', component: ClientListComponent },
  // Route for the client list view. Navigates to ClientListComponent.

  { path: 'create-client', component: CreateClientComponent },
  // Route for the create client page. Navigates to CreateClientComponent.

  { path: '', redirectTo: 'clients', pathMatch: 'full' },
  // Redirects the base path ('') to the 'clients' path. The `pathMatch: 'full'` ensures a full match is required for redirection.

  { path: 'update-client/:id', component: UpdateClientComponent },
  // Route for updating a specific client. Includes a route parameter `id` to identify the client.

  { path: 'client-details/:id', component: ClientDetailsComponent }
  // Route for viewing details of a specific client. Includes a route parameter `id`.
];

// The AppRoutingModule class defines the routing module for the application.
@NgModule({
  imports: [RouterModule.forRoot(routes)],
  // Configures the router with the defined routes using `forRoot`.

  exports: [RouterModule]
  // Exports RouterModule to make the configured routes available throughout the application.
})
export class AppRoutingModule { }

  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\app.component.css
---
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\app.component.html
---
<nav class="navbar navbar-expand-sm bg-primary navbar-dark">
    <ul class="navbar-nav">
        <li class="nav-item">
            <button (click)="navigateToClients()" class="btn btn-primary">Clients List</button>
        </li>
        <li class="nav-item">
            <button (click)="navigateToCreateClient()" class="btn btn-primary">Add Client</button>
        </li>
    </ul>
</nav>

<div class="container">
    <router-outlet></router-outlet>
</div>

<footer class="footer">
    <div class="container">
        <span>{{information}} - {{year}} </span>
    </div>
</footer>
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\app.component.spec.ts
---
import { TestBed, async } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async(() => {
    TestBed.configureTestingModule({
      imports: [
        RouterTestingModule
      ],
      declarations: [
        AppComponent
      ],
    }).compileComponents();
  }));

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'angular-frontend'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('angular-frontend');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement;
    expect(compiled.querySelector('.content span').textContent).toContain('angular-frontend app is running!');
  });
});  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\app.component.ts
---
import { Component } from '@angular/core';
import { Router } from '@angular/router'; // Import Router

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})

export class AppComponent {
  title = 'angular-frontend';
  information = 'Angular with Spring Boot CRUD';
  year = new Date().getFullYear();

  constructor(private router: Router) { } // Inject Router

  navigateToClients() {
    this.router.navigate(['/clients']);
  }

  navigateToCreateClient() {
    this.router.navigate(['/create-client']);
  }
}
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\app.config.server.ts
---
import { mergeApplicationConfig, ApplicationConfig } from '@angular/core';
import { provideServerRendering } from '@angular/platform-server';
import { provideServerRouting } from '@angular/ssr';
import { appConfig } from './app.config';
import { serverRoutes } from './app.routes.server';

const serverConfig: ApplicationConfig = {
  providers: [
    provideServerRendering(),
    provideServerRouting(serverRoutes)
  ]
};

export const config = mergeApplicationConfig(appConfig, serverConfig);
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\app.config.ts
---
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import { provideClientHydration, withEventReplay } from '@angular/platform-browser';

export const appConfig: ApplicationConfig = {
  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes), provideClientHydration(withEventReplay())]
};
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\app.module.ts
---
// Importing necessary Angular modules and components
import { BrowserModule } from '@angular/platform-browser'; // Required for running the application in the browser
import { NgModule } from '@angular/core'; // Core module for Angular applications
import { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http'; // HTTP client related imports for making API calls
import { AppRoutingModule } from './app-routing.module'; // Import the routing configuration for the app
import { AppComponent } from './app.component'; // Root component of the application
import { ClientListComponent } from './client-list/client-list.component'; // Component for displaying the list of clients
import { CreateClientComponent } from './create-client/create-client.component'; // Component for creating a new client
import { FormsModule } from '@angular/forms'; // Module to handle forms, necessary for binding input fields and form submission
import { UpdateClientComponent } from './update-client/update-client.component'; // Component for updating an existing client
import { ClientDetailsComponent } from './client-details/client-details.component'; // Component for viewing details of a specific client

@NgModule({
    // Declaring the components that belong to this module
    declarations: [
        AppComponent,
        ClientListComponent,
        CreateClientComponent,
        UpdateClientComponent,
        ClientDetailsComponent
    ],
    // Setting up the root component that will be bootstrapped on application launch
    bootstrap: [AppComponent],

    // Importing necessary modules to be available throughout the application
    imports: [
        BrowserModule, // Required for web-based applications
        AppRoutingModule, // Includes routing configuration for navigating between views
        FormsModule // Required for handling template-driven forms
    ],

    // Registering providers for services like HTTP client configuration
    providers: [
        provideHttpClient(withInterceptorsFromDi()) // Configures HTTP client with interceptors injected from DI (dependency injection)
    ]
})
export class AppModule { }
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\app.routes.server.ts
---
import { RenderMode, ServerRoute } from '@angular/ssr';

export const serverRoutes: ServerRoute[] = [
  {
    path: '**',
    renderMode: RenderMode.Prerender
  }
];
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\app.routes.ts
---
import { Routes } from '@angular/router';

export const routes: Routes = [];
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\c.bat
---
@ECHO OFF
SETLOCAL

SET "output_file=all_ts_files.txt"

REM Clear the output file if it exists
IF EXIST "%output_file%" DEL "%output_file%"

FOR %%F IN (*.*) DO (
    ECHO ==================================== >> "%output_file%"
    ECHO FILE: %%F >> "%output_file%"
    ECHO ==================================== >> "%output_file%"
    TYPE "%%F" >> "%output_file%"
    ECHO. >> "%output_file%" REM Add an extra blank line for separation
)

ECHO Concatenation complete. Output saved to %output_file%
ENDLOCAL
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\client.service.spec.ts
---
import { TestBed } from '@angular/core/testing';

import { ClientService } from './client.service';

describe('ClientService', () => {
  let service: ClientService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(ClientService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\client.service.ts
---
import { Injectable } from '@angular/core'; // Importing Angular core to enable dependency injection
import { HttpClient } from '@angular/common/http'; // Importing HttpClient to make HTTP requests
import { Observable } from 'rxjs'; // Importing Observable to handle asynchronous data streams
import { ClientsBean } from './clientsBean'; // Importing the ClientsBean model to type the responses

// Marking the service as injectable and available for dependency injection across the application
@Injectable({
  providedIn: 'root' // The service is available throughout the entire application
})
export class ClientService {

  // Defining the base URL for the API that provides client data
  private baseURL = "http://localhost:8081/api/v1/clients";

  // Constructor injects the HttpClient to perform HTTP requests
  constructor(private httpClient: HttpClient) { }

  // Method to get a list of clients from the API
  getClientsList(): Observable<ClientsBean[]> {
    // HTTP GET request to fetch the list of clients from the API
    return this.httpClient.get<ClientsBean[]>(`${this.baseURL}`);
  }

  // Method to create a new client by sending a POST request to the API
  createClient(client: ClientsBean): Observable<Object> {
    // HTTP POST request to create a new client
    return this.httpClient.post(`${this.baseURL}`, client);
  }

  // Method to get a specific client by their ID from the API
  getClientById(id: number): Observable<ClientsBean> {
    // HTTP GET request to fetch a specific client based on the ID
    return this.httpClient.get<ClientsBean>(`${this.baseURL}/${id}`);
  }

  // Method to update a client's data by sending a PUT request to the API
  updateClient(id: number, client: ClientsBean): Observable<Object> {
    // HTTP PUT request to update client details based on their ID
    return this.httpClient.put(`${this.baseURL}/${id}`, client);
  }

  // Method to delete a client by their ID by sending a DELETE request to the API
  deleteClient(id: number): Observable<Object> {
    // HTTP DELETE request to remove a client based on the ID
    return this.httpClient.delete(`${this.baseURL}/${id}`);
  }
}
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\client.spec.ts
---
import { ClientsBean } from './clientsBean';

describe('Client', () => {
  it('should create an instance', () => {
    expect(new ClientsBean()).toBeTruthy();
  });
});
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\clientsBean.ts
---
export class ClientsBean {
    id: number;
    firstName: string;
    lastName: string;
    emailId: string;
    creditLimit: number;
}
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\client-details\client-details.component.css
---
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\client-details\client-details.component.html
---
<h2 class="text-center"> View Client Details</h2>
<hr>
<br>
<div>
    <div>
        <label> <b> Id: </b></label> {{client.id}}
    </div>
    <div>
        <label> <b> First Name: </b></label> {{client.firstName}}
    </div>
    <div>
        <label> <b> Last Name: </b></label> {{client.lastName}}
    </div>
    <div>
        <label> <b> Email Id: </b></label> {{client.emailId}}
    </div>
    <div>
        <label> <b> Credit Limit: </b></label> {{ client.creditLimit | currency:'EUR' }}
    </div>
</div>  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\client-details\client-details.component.spec.ts
---
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { ClientDetailsComponent } from './client-details.component';

describe('ClientDetailsComponent', () => {
  let component: ClientDetailsComponent;
  let fixture: ComponentFixture<ClientDetailsComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ClientDetailsComponent]
    })
      .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(ClientDetailsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\client-details\client-details.component.ts
---
// Importing necessary modules and classes from Angular core, router, and services.
import { Component, OnInit } from '@angular/core';
import { ClientsBean } from '../clientsBean'; // Importing the model class representing a client.
import { ActivatedRoute } from '@angular/router'; // Provides access to route parameters.
import { ClientService } from '../client.service'; // Service for interacting with client data.

@Component({
  selector: 'app-client-details', // Specifies the HTML tag name for this component.
  templateUrl: './client-details.component.html', // Path to the HTML template for this component.
  styleUrls: ['./client-details.component.css'] // Path to the CSS styles for this component.
})

export class ClientDetailsComponent implements OnInit {

  id: number; // Stores the client ID retrieved from the route parameters.
  client: ClientsBean; // Represents the client data to be displayed.

  // Constructor injecting the required services for route handling and data retrieval.
  constructor(private route: ActivatedRoute, private employeService: ClientService) { }

  /**
   * Lifecycle hook called once after the component is initialized.
   */
  ngOnInit(): void {
    // Retrieves the 'id' parameter from the route snapshot.
    this.id = this.route.snapshot.params['id'];

    // Initializes the `client` object to an empty `ClientsBean` instance.
    this.client = new ClientsBean();

    // Calls the service method to fetch the client data by ID and subscribes to the response.
    this.employeService.getClientById(this.id).subscribe(data => {
      this.client = data; // Assigns the retrieved data to the `client` property.
    });
  }
}
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\client-list\client-list.component.css
---
.text-start {
    text-align: left;
}

.text-end {
    text-align: right;
}  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\client-list\client-list.component.html
---
<h2 class="text-center">Client List</h2>
<hr>
<br>
<table class="table table-striped">
    <thead>
        <tr>
            <th> First Name </th>
            <th> Last Name </th>
            <th> Email Id </th>
            <th> Credit Limit </th>
            <th> Actions </th>
        </tr>
    </thead>
    <tbody>
        <tr *ngFor="let client of clients">
            <td> {{ client.firstName }} </td>
            <td> {{ client.lastName }} </td>
            <td> {{ client.emailId }} </td>
            <td class="text-end"> {{ client.creditLimit | currency:'EUR' }} </td>
            <td>
                <button (click)="updateClient(client.id)" class="btn btn-info"> Update</button>
                <button (click)="deleteClient(client.id)" class="btn btn-danger" style="margin-left: 10px">
                    Delete</button>
                <button (click)="clientDetails(client.id)" class="btn btn-info" style="margin-left: 10px">
                    View</button>
            </td>
        </tr>
    </tbody>
</table>  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\client-list\client-list.component.spec.ts
---
import { async, ComponentFixture, TestBed } from '@angular/core/testing';
import { ClientListComponent } from './client-list.component';

describe('ClientListComponent', () => {
  let component: ClientListComponent;
  let fixture: ComponentFixture<ClientListComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ClientListComponent]
    })
      .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(ClientListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\client-list\client-list.component.ts
---
import { Component, OnInit } from '@angular/core'; // Importing necessary Angular decorators and lifecycle hooks
import { ClientsBean } from '../clientsBean'; // Importing the ClientsBean model to type the client data
import { ClientService } from '../client.service'; // Importing the ClientService to fetch and manage clients
import { Router } from '@angular/router'; // Importing the Router to handle navigation

@Component({
  selector: 'app-client-list', // Defining the component selector to be used in the HTML template
  templateUrl: './client-list.component.html', // Linking the HTML template for this component
  styleUrls: ['./client-list.component.css'] // Linking the CSS for this component
})
export class ClientListComponent implements OnInit {

  // Defining a property to store the list of clients
  clients: ClientsBean[];

  // Constructor to inject ClientService and Router into the component
  constructor(private clientService: ClientService,
    private router: Router) { }

  // ngOnInit lifecycle hook to call the getClients method once the component is initialized
  ngOnInit(): void {
    this.getClients(); // Fetching the list of clients when the component initializes
  }

  // Private method to fetch the list of clients from the ClientService
  private getClients() {
    this.clientService.getClientsList().subscribe(data => {
      this.clients = data; // Storing the fetched clients data in the clients array
    });
  }

  // Method to navigate to the client details page when a user clicks on a client
  clientDetails(id: number) {
    this.router.navigate(['client-details', id]); // Navigating to the client details page with the client id
  }

  // Method to navigate to the update client page when a user clicks on the update button
  updateClient(id: number) {
    this.router.navigate(['update-client', id]); // Navigating to the update client page with the client id
  }

  // Method to delete a client when a user clicks the delete button
  deleteClient(id: number) {
    this.clientService.deleteClient(id).subscribe(data => {
      // After the client is deleted, refresh the list of clients
      this.getClients();
    });
  }
}
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\create-client\create-client.component.css
---
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\create-client\create-client.component.html
---
<div class="col-md-6 offset-md-3">
    <h3 class="text-center"> Create Client </h3>
    <hr>
    <br>
    <form (ngSubmit)="onSubmit()">

        <div class="form-group">
            <label> First Name</label>
            <input type="text" class="form-control" id="firstName" [(ngModel)]="client.firstName" name="firstName">
        </div>

        <div class="form-group">
            <label> Last Name</label>
            <input type="text" class="form-control" id="lastName" [(ngModel)]="client.lastName" name="lastName">
        </div>

        <div class="form-group">
            <label> Email Id</label>
            <input type="text" class="form-control" id="emailId" [(ngModel)]="client.emailId" name="emailId">
        </div>

        <div class="form-group">
            <label> Credit Limit</label>
            <input type="text" class="form-control" id="creditLimit" [(ngModel)]="client.creditLimit"
                name="creditLimit">
        </div>

        <br>

        <button class="btn btn-success" type="submit">Submit</button>

    </form>
</div>  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\create-client\create-client.component.spec.ts
---
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { CreateClientComponent } from './create-client.component';

describe('CreateClientComponent', () => {
  let component: CreateClientComponent;
  let fixture: ComponentFixture<CreateClientComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [CreateClientComponent]
    })
      .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(CreateClientComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\create-client\create-client.component.ts
---
import { Component, OnInit } from '@angular/core'; // Import necessary Angular decorators
import { ClientsBean } from '../clientsBean'; // Import the client model (ClientsBean)
import { ClientService } from '../client.service'; // Import the service that interacts with the backend
import { Router } from '@angular/router'; // Import Router for navigation between routes
import { CurrencyPipe } from '@angular/common'; // Import CurrencyPipe for formatting currency values

@Component({
  selector: 'app-create-client', // Defines the tag that will be used to render the component in HTML
  templateUrl: './create-client.component.html', // Specifies the HTML template for this component
  styleUrls: ['./create-client.component.css'], // Specifies the CSS file(s) for styling this component
  providers: [CurrencyPipe] // Provide CurrencyPipe in the component to format currency values
})

export class CreateClientComponent implements OnInit {

  client: ClientsBean = new ClientsBean(); // Initialize the client object (new instance of ClientsBean)

  constructor(
    private clientService: ClientService, // Inject ClientService to make API requests
    private router: Router, // Inject Router to navigate between pages
    private currencyPipe: CurrencyPipe // Inject CurrencyPipe for formatting currency
  ) { }

  // ngOnInit lifecycle hook (currently empty, as there's no initialization logic needed)
  ngOnInit(): void {
  }

  // Method to save the client by calling the createClient method from the ClientService
  saveClient() {
    this.clientService.createClient(this.client).subscribe(data => {
      console.log(data); // Log the response from the backend (e.g., newly created client)
      this.goToClientList(); // Navigate to the client list after successful client creation
    },
      error => console.log(error)); // Log any errors if the API request fails
  }

  // Navigate to the client list page
  goToClientList() {
    this.router.navigate(['/clients']); // Redirect to the 'clients' route (client list page)
  }

  // Handle form submission
  onSubmit() {
    console.log(this.client); // Log the current client data (for debugging purposes)
    this.saveClient(); // Call the saveClient method to send the data to the backend
  }
}
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\update-client\update-client.component.css
---
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\update-client\update-client.component.html
---
<div class="col-md-6 offset-md-3">
    <h3 class="text-center"> Update Client </h3>
    <hr>
    <br>
    <form (ngSubmit)="onSubmit()">

        <div class="form-group">
            <label> First Name</label>
            <input type="text" class="form-control" id="firstName" [(ngModel)]="client.firstName" name="firstName">
        </div>

        <div class="form-group">
            <label> Last Name</label>
            <input type="text" class="form-control" id="lastName" [(ngModel)]="client.lastName" name="lastName">
        </div>

        <div class="form-group">
            <label> Email Id</label>
            <input type="text" class="form-control" id="emailId" [(ngModel)]="client.emailId" name="emailId">
        </div>

        <div class="form-group">
            <label> Credit Limit</label>
            <input type="text" class="form-control" id="creditLimit" [(ngModel)]="client.creditLimit"
                name="creditLimit">
        </div>

        <br>
        <div>
            <button class="btn btn-success" type="submit">Submit</button>
        </div>
    </form>
</div>  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\update-client\update-client.component.spec.ts
---
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { UpdateClientComponent } from './update-client.component';

describe('UpdateClientComponent', () => {

  let component: UpdateClientComponent;
  let fixture: ComponentFixture<UpdateClientComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [UpdateClientComponent]
    })
      .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(UpdateClientComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\app\update-client\update-client.component.ts
---
import { Component, OnInit } from '@angular/core'; // Import Angular decorators
import { ClientService } from '../client.service'; // Import the service that interacts with the backend
import { ClientsBean } from '../clientsBean'; // Import the client model (ClientsBean)
import { ActivatedRoute, Router } from '@angular/router'; // Import ActivatedRoute for route parameters and Router for navigation

@Component({
  selector: 'app-update-client', // Defines the HTML tag used for this component
  templateUrl: './update-client.component.html', // Points to the template file for this component
  styleUrls: ['./update-client.component.css'] // Specifies the CSS file for styling this component
})

export class UpdateClientComponent implements OnInit {

  id: number; // The ID of the client being updated
  client: ClientsBean = new ClientsBean(); // Client object initialized as a new instance of ClientsBean

  constructor(
    private clientService: ClientService, // Inject ClientService to interact with the API
    private route: ActivatedRoute, // Inject ActivatedRoute to get route parameters (client ID)
    private router: Router // Inject Router to navigate between routes
  ) { }

  // ngOnInit lifecycle hook, called when the component is initialized
  ngOnInit(): void {
    this.id = this.route.snapshot.params['id']; // Get the 'id' from the route parameters

    // Fetch the client data using the ID and populate the form fields
    this.clientService.getClientById(this.id).subscribe(data => {
      this.client = data; // Assign the retrieved data to the client object
    }, error => console.log(error)); // Handle any errors (e.g., client not found)
  }

  // onSubmit method called when the form is submitted
  onSubmit() {
    // Call updateClient from the ClientService to update the client details
    this.clientService.updateClient(this.id, this.client).subscribe(data => {
      this.goToClientList(); // Navigate to the client list after a successful update
    },
      error => console.log(error)); // Handle errors
  }

  // Navigate back to the client list page
  goToClientList() {
    this.router.navigate(['/clients']); // Redirect to the 'clients' route (client list page)
  }
}
  REM Add an extra blank line for separation
---
FILE: E:\JsAngular\AngularSpringBootCrud\angular-frontend\src\assets\.gitkeep
---
  REM Add an extra blank line for separation
